institution_id: bhInst.

status_functions:
states: play(A,R,G), responsible(G,S), committed(A,Mission,S), achieved(S,G,A),
mission_role(M,R), done(S,G,A), well_formed(Group).

constitutive_rules:
1: count-as play(bob,reddit_contributor,"funny") .
2: count-as play(alice,reddit_subscriber,"funny").
3: count-as responsible("funny","funny_scheme")
   while play(A,reddit_subscriber,"funny") .
4: count-as responsible("funny","funny_scheme")
   while play(A,reddit_contributor,"funny") .
5: play(A,reddit_contributor,"funny")
   count-as committed(A,submit,"funny_scheme")
   while responsible("funny","funny_scheme") .
6: play(A,reddit_subscriber,"funny")
   count-as committed(A,retrieve,"funny_scheme")
     while responsible("funny","funny_scheme").
7: count-as done(funny_scheme,retrieve_post,A)
     when readProperty(retrievePost, Status)[sai__agent(A)].
8: count-as done(sch1,retrieve_post,A)
      when readProperty(retrievePost, Status)[sai__agent(A)].
9: count-as done(funny_scheme,submit_post,A)
   when invokeAction(submitPost, json([kv(title, bonjour), kv(text, test), kv(sr, testingground4bots), kv(kind, image), kv(url, test)]),Null)[sai__agent(A)] .
10: count-as done(sch1,submit_post,A)
   when invokeAction(submitPost, json([kv(title, bonjour), kv(text, test), kv(sr, testingground4bots), kv(kind, image), kv(url, test)]),Null)[sai__agent(A)] .